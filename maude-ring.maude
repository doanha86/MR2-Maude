load model-checker.maude
load full-maude.maude

fmod RSIGNATURE is
 inc FULL-MAUDE-SIGN .

 op ring : -> @Attr@ [ctor] .
 op cring : -> @Attr@ [ctor] .
 op aring : -> @Attr@ [ctor] .
endfm

fmod META-RSIGN is
 inc META-FULL-MAUDE-SIGN .

 var SSDS : SubsortDeclSet .
 var EqS : EquationSet .
 var OPDS : OpDeclSet .
 var MAS : MembAxSet .
 var IL : ImportList .
 var QIDL : QidList .
 var HL : HookList .
 var RlS : RuleSet .
 var SS : SortSet .
 var H : Header .
 var I : Import .
 var M : Module .

 op addExclusion : FModule -> FModule .
 eq addExclusion(fmod H is IL sorts SS . SSDS
 op 'sortToken : 'Qid -> '@SortToken@
 [special(HL id-hook('Exclude, QIDL))] . OPDS MAS EqS endfm) = fmod H is IL sorts SS . SSDS
 op 'sortToken : 'Qid -> '@SortToken@
 [special(HL id-hook('Exclude, QIDL 'ring 'cring 'aring ))] . OPDS MAS EqS endfm .

 op RGRAMMAR : -> FModule [memo] .
 eq RGRAMMAR = addExclusion(addImports((including 'RSIGNATURE .), GRAMMAR)) .
endfm

fmod RING-BANNER is
 pr STRING .
 op ring-banner : -> String .
 eq ring-banner = "Ring attributes available (October 25th, 2017)" .
endfm

fmod RING-TRANSFORMATION is
 pr META-LEVEL .
 pr RSIGNATURE .
 pr UNIT .
 pr NAT .

 sort op-ring .
 sort op-ringList .
 sort setTermList .
 subsort op-ring < op-ringList .
 subsort TermList < setTermList .

 op empRL : -> op-ringList  .
 op <_,_,_> : Qid TypeList Type ->  op-ring [ctor] .
 op __ : op-ring op-ring -> op-ring [assoc id: empRL] .

 op emp : -> setTermList .
 op _||_ : setTermList setTermList -> setTermList [assoc id: emp] .

 vars QidS QidS' QidS'' : QidSet .
 vars OPDS OPDS' : OpDeclSet .
 vars SSDS SSDS' : SubsortDeclSet .
 vars TL TL1 TL' : TermList .
 var TLS : setTermList .
 vars EqC EqC' : EqCondition .
 vars QC QC' : Condition .
 vars EqS EqS' : EquationSet .
 vars H F F' : Header .
 var MAS : MembAxSet .
 var IL : ImportList .
 var Cd : Condition .
 var TpL : TypeList .
 var RlS : RuleSet .
 var AtS : AttrSet .
 vars T T' : Term .
 var SS : SortSet .
 var E : Equation .
 vars V V' : Variable .
 var C : Constant .
 var OP : OpDecl .
 vars N N' : Nat .
 var I : Import .
 vars Tp Tp' : Type .
 var R : Rule .
 var Q : Qid .
 var S : Sort .
 var M : Module .
 vars N1 N3 N4 : String .
 vars N2 N5 : TermList .

 op rt : Module -> Module .
 op rt : Module OpDeclSet SubsortDeclSet -> Module .
 op rt1 : Module -> Module .
 op rt1 : Module OpDeclSet SubsortDeclSet -> Module .

 op rt-eq : EquationSet QidSet QidSet QidSet -> EquationSet .
 op rt-eq-add : Equation QidSet QidSet QidSet -> EquationSet .
 op rt-check : Equation QidSet -> Bool .
 op rt-eq-gen : Term QidSet QidSet QidSet -> TermList .
 op rt-eq-make :  setTermList Term AttrSet -> EquationSet .
 op rt-eq-make : setTermList Term Condition AttrSet -> EquationSet .
 op rt-eq-make1 : TermList Term AttrSet -> EquationSet .
 op rt-eq-make1 : TermList Term Condition AttrSet -> EquationSet .

 op rt-rl : RuleSet QidSet QidSet QidSet -> RuleSet .
 op rt-rl-add : Rule QidSet QidSet QidSet -> RuleSet .
 op rt-check : Rule QidSet -> Bool .
 op rt-rl-gen : Term QidSet -> TermList .
 op rt-rl-make :  setTermList Term AttrSet -> RuleSet .
 op rt-rl-make : setTermList Term Condition AttrSet -> RuleSet .
 op rt-rl-make1 : TermList Term AttrSet -> RuleSet .
 op rt-rl-make1 : TermList Term Condition AttrSet -> RuleSet .

 op eqQidList : QidSet QidSet -> Bool .
 op rt-getOpSet : TermList -> QidSet .

 op rt-getOpName : OpDeclSet -> QidSet .
 op crt-getOpName : OpDeclSet -> QidSet .
 op art-getOpName : OpDeclSet -> QidSet .

 op rt-term : Qid Qid TermList -> TermList .
 op rt-termList : TermList QidSet QidSet QidSet -> setTermList .
 op mkSet : setTermList -> setTermList .

 op rt-term-round : Qid Qid setTermList -> setTermList .
 op rt-term-cround : Qid Qid setTermList -> setTermList .
 op rt-term-around : Qid Qid setTermList -> setTermList .

 op rt-round : TermList Nat Nat -> setTermList .
 op rt-cround : TermList Nat Nat -> setTermList .
 op rt-around : TermList Nat Nat -> setTermList .

 op numElem :  TermList -> Nat .
 op mkSet : setTermList -> setTermList .
 op mkSet1 : Term setTermList -> setTermList .
 op rt-getTermList : Qid TermList -> TermList .
 op invert : TermList -> TermList .
 
 op rt-addInvertOp : OpDeclSet SubsortDeclSet -> OpDeclSet .
 op rt-addInvertEq : OpDeclSet TypeList -> EquationSet .
 op getTypeList : OpDeclSet -> TypeList .
 op addInvert : Qid TypeList Term -> EquationSet .
 op addInvert1 : TypeList -> OpDeclSet .
 op _in_ : Type TypeList -> Bool .
 op checkId : AttrSet -> Bool .
 op getId : AttrSet -> Term .
 
 op slipt : TermList QidSet QidSet QidSet -> TermList .
 op slipt1 : TermList QidSet QidSet QidSet -> TermList .
 op slipt : TermList QidSet QidSet QidSet -> TermList .
 op sliptr : TermList QidSet -> TermList .
 
 
 op sliptt : TermList  -> TermList .
 op sliptt1 : TermList  -> TermList .

 op getVarSetSlipt : TermList QidSet QidSet QidSet -> TermList .
 op getVarSetSlipt1 : TermList QidSet QidSet QidSet -> TermList .



  eq sliptt(V) = V .
  eq sliptt(C) = C .
  eq sliptt(F'[F[TL]]) =  F'[F[sliptt1(TL)]]  .
  eq sliptt(F[TL]) = F[TL] [owise] .
  
  eq sliptt1(V) = (V ; qid(string(getName(V)) + "1" + ":" + string(getType(V)))) .
  eq sliptt1(C) = C .
  eq sliptt1(F[TL]) = F[sliptt(TL)]  .
  eq sliptt1((T, TL)) = sliptt1(T), sliptt1(TL) [owise] .

  eq getVarSetSlipt(V, QidS, QidS', QidS'') = none .
  eq getVarSetSlipt(C, QidS, QidS', QidS'') = none .
  ceq getVarSetSlipt(F'[F[TL]], QidS, QidS', QidS'') =  getVarSetSlipt1(TL, QidS, QidS', QidS'') if (F' in QidS) .
  ceq getVarSetSlipt(F'[F[TL]], QidS, QidS', QidS'') =  getVarSetSlipt1(TL, QidS, QidS', QidS'') if (F' in QidS') .
  ceq getVarSetSlipt(F'[F[TL]], QidS, QidS', QidS'') =  getVarSetSlipt1(TL, QidS, QidS', QidS'') if (F' in QidS'') .
  eq getVarSetSlipt(empty, QidS, QidS', QidS'') = none .
  eq getVarSetSlipt(F[TL], QidS, QidS', QidS'') = getVarSetSlipt(TL, QidS, QidS', QidS'') .
  eq getVarSetSlipt((T, TL), QidS, QidS', QidS'') = (getVarSetSlipt(T, QidS, QidS', QidS'') ; getVarSetSlipt(TL, QidS, QidS', QidS'')) [owise] .

  eq getVarSetSlipt1(V, QidS, QidS', QidS'') = V  .
  eq getVarSetSlipt1(C, QidS, QidS', QidS'') = none .
  eq getVarSetSlipt1(F[TL], QidS, QidS', QidS'') = getVarSetSlipt(TL, QidS, QidS', QidS'')  .
  eq getVarSetSlipt1((T, TL),  QidS, QidS', QidS'') = getVarSetSlipt1(T,  QidS, QidS', QidS'') ; getVarSetSlipt1(TL,  QidS, QidS', QidS'') [owise] .


  eq slipt(V, QidS, QidS', QidS'') = V .
  eq slipt(C, QidS, QidS', QidS'') = C .
  ceq slipt(F'[F[TL]], QidS, QidS', QidS'') =  F'[F[slipt1(TL, QidS, QidS', QidS'')]] if (F' in QidS) .
  ceq slipt(F'[F[TL]], QidS, QidS', QidS'') =  F'[F[slipt1(TL, QidS, QidS', QidS'')]] if (F' in QidS') .
  ceq slipt(F'[F[TL]], QidS, QidS', QidS'') =  F'[F[slipt1(TL, QidS, QidS', QidS'')]] if (F' in QidS'') .
  eq slipt(empty, QidS, QidS', QidS'') = empty .
  eq slipt(F[TL], QidS, QidS', QidS'') = F[slipt(TL, QidS, QidS', QidS'')] .
  eq slipt((T, TL), QidS, QidS', QidS'') = (slipt(T, QidS, QidS', QidS'') , slipt(TL, QidS, QidS', QidS'')) [owise] .



 *** eq slipt1(V, QidS, QidS', QidS'') = (V , qid(string(getName(V)) + "1" + ":" + string(getType(V)))) .
 eq slipt1(V, QidS, QidS', QidS'') = V .
 eq slipt1(C, QidS, QidS', QidS'') = C .
 eq slipt1(empty, QidS, QidS', QidS'') = empty .
 eq slipt1(F[TL], QidS, QidS', QidS'') = F[slipt(TL, QidS, QidS', QidS'')]  .
 eq slipt1((T, TL),  QidS, QidS', QidS'') = slipt1(T,  QidS, QidS', QidS''), slipt1(TL,  QidS, QidS', QidS'') [owise] .

 *** eq sliptr(V, QidS) = if (V in QidS) then (V , qid(string(getName(V)) + "1" + ":" + string(getType(V)))) else V fi .
 eq sliptr(V, QidS) = V .
 eq sliptr(C, QidS) = C .
 eq sliptr(empty, QidS) = empty .
 eq sliptr(F[TL], QidS) = F[sliptr(TL, QidS)] .
 eq sliptr((T, TL), QidS) = (sliptr(T, QidS) , sliptr(TL, QidS)) .

 eq checkId((id(T)) AtS) = true .
 eq checkId(AtS) = false [owise] .

 eq getId((id(T)) AtS) = T .
 eq getId(AtS) = none [owise] .
 
 
 eq (Tp in (Tp' TpL)) = (Tp == Tp') or (Tp in TpL) .
 eq (Tp in nil) = false .

 eq getTypeList(op F : TpL -> Tp' [AtS] . OPDS) = if (metadata("ring") in (AtS)) or (metadata("aring") in (AtS)) then TpL getTypeList(OPDS) else getTypeList(OPDS) fi .
 

 eq rt-addInvertEq(op F : Tp Tp -> Tp [AtS] . OPDS, TpL) = if ((Tp in TpL) and (ctor in AtS) and checkId(AtS)) then addInvert(F, Tp, getId(AtS)) rt-addInvertEq(OPDS, TpL) else rt-addInvertEq(OPDS, TpL) fi .
 eq rt-addInvertEq(OP OPDS, TpL) =  rt-addInvertEq(OPDS, TpL) [owise] .
 eq rt-addInvertEq(none, TpL) = none .

 *** eq addInvert(Q, Tp, T) =  (eq 'invert[qid("F:" + string(Tp))] = qid("F:" + string(Tp)) [owise] .) .

  eq addInvert(Q, Tp, T) =  (ceq 'invert[Q[qid("F:" + string(Tp)), qid("F':" + string(Tp))]] = Q['invert[qid("F':" + string(Tp))], 'invert[qid("F:" + string(Tp))]] if '_and_['_=/=_[qid("F:" + string(Tp)), T], '_=/=_[qid("F':" + string(Tp)), T]] = 'true.Bool [none] .) (eq 'invert[qid("F:" + string(Tp))] = qid("F:" + string(Tp)) [owise] .) .
 
 eq rt-addInvertOp(op F : TpL -> Tp [AtS] . OPDS, SSDS) = if (metadata("ring") in (AtS)) or (metadata("aring") in (AtS)) then addInvert1(TpL) rt-addInvertOp(OPDS, SSDS) else rt-addInvertOp(OPDS, SSDS) fi .
 eq rt-addInvertOp(none, SSDS) = none .
 
 eq addInvert1(TpL) =  (op 'invert : TpL -> TpL [none] .)  .
 eq addInvert1(nil) = none .

 *** eq rt(M) = rt1(rb(M)) .
 eq rt(M) = rb(M) .
 eq rt(M, OPDS', SSDS') = rt1(rb(M), OPDS', SSDS') .

 eq rt1(mod H is IL sorts SS . SSDS OPDS MAS EqS RlS endm) = mod H is IL sorts SS . SSDS OPDS rt-addInvertOp(OPDS, SSDS) MAS 
    rt-addInvertEq(OPDS, getTypeList(OPDS)) rt-eq(EqS, rt-getOpName(OPDS), crt-getOpName(OPDS), art-getOpName(OPDS))
    rt-rl(RlS, rt-getOpName(OPDS), crt-getOpName(OPDS), art-getOpName(OPDS))  endm .
 eq rt1(fmod H is IL sorts SS . SSDS OPDS MAS EqS endfm) = fmod H is IL sorts SS . SSDS OPDS rt-addInvertOp(OPDS, SSDS) MAS
    rt-addInvertEq(OPDS, getTypeList(OPDS)) rt-eq(EqS, rt-getOpName(OPDS), crt-getOpName(OPDS), art-getOpName(OPDS)) endfm .

 eq rt1(mod H is IL sorts SS . SSDS OPDS MAS EqS RlS endm, OPDS', SSDS') = mod H is IL sorts SS . SSDS OPDS rt-addInvertOp(OPDS OPDS', SSDS  SSDS') MAS
    rt-addInvertEq(OPDS OPDS', getTypeList(OPDS OPDS')) rt-eq(EqS, rt-getOpName(OPDS OPDS'), crt-getOpName(OPDS OPDS'), art-getOpName(OPDS OPDS'))
    rt-rl(RlS, rt-getOpName(OPDS'), crt-getOpName(OPDS'), art-getOpName(OPDS')) endm .
 eq rt1(fmod H is IL sorts SS . SSDS OPDS MAS EqS endfm, OPDS', SSDS') = fmod H is IL sorts SS . SSDS OPDS rt-addInvertOp(OPDS OPDS', SSDS  SSDS') MAS
    rt-addInvertEq(OPDS OPDS', getTypeList(OPDS OPDS')) rt-eq(EqS, rt-getOpName(OPDS OPDS'), crt-getOpName(OPDS OPDS'), art-getOpName(OPDS OPDS')) endfm .

 eq rt-eq(none, QidS, QidS', QidS'') = none .
 eq rt-eq(E EqS, QidS, QidS', QidS'') = if rt-check(E, QidS ; QidS' ; QidS'')
    then rt-eq-add(E, QidS, QidS', QidS'') rt-eq(EqS, QidS, QidS', QidS'')
    else E rt-eq(EqS, QidS, QidS', QidS'') fi .

 eq rt-check(eq T = T' [AtS] ., QidS) = eqQidList(rt-getOpSet(T), QidS) .
 eq rt-check(ceq T = T' if EqC [AtS]., QidS) = eqQidList(rt-getOpSet(T), QidS) .

 eq rt-rl(none, QidS, QidS', QidS'') = none .
 eq rt-rl(R RlS, QidS, QidS', QidS'') = if rt-check(R, QidS ; QidS' ; QidS'')
    then rt-rl-add(R, QidS, QidS', QidS'') rt-rl(RlS, QidS, QidS', QidS'')
    else  R rt-rl(RlS, QidS, QidS', QidS'') fi .

 eq rt-check(rl T => T' [AtS] ., QidS) = eqQidList(rt-getOpSet(T), QidS) .
 eq rt-check(crl T => T' if Cd [AtS] ., QidS) = eqQidList(rt-getOpSet(T), QidS) .

 eq rt-getOpSet(V) = none .
 eq rt-getOpSet(C) = none .
 eq rt-getOpSet(empty) = none .
 eq rt-getOpSet(F[TL]) = F ; rt-getOpSet(TL) .
 eq rt-getOpSet((T , TL')) = rt-getOpSet(T) ; rt-getOpSet(TL') .

 op getInv : TermList -> TermList .
 eq getInv(empty) = empty . 
 eq getInv(C) = C .
 eq getInv(V) = V .
 eq getInv(inv(TL)) = TL .
 eq getInv(F[TL]) = F[getInv(TL)] .
 eq getInv((T, TL)) = getInv(T), getInv(TL) .

 op checkIvn : TermList -> Bool .
 eq checkIvn(empty) = false .
 eq checkIvn(C) = false .
 eq checkIvn(V) = false .
 eq checkIvn(inv(TL)) = true .
 eq checkIvn(F[TL]) = checkIvn(TL) .
 eq checkIvn((T, TL)) = if checkIvn(T) then true else  checkIvn(TL) fi .

 op setInver : TermList TermList -> TermList .
 op setInver : EqCondition TermList -> EqCondition .
 op setInver : Condition TermList -> Condition .
 eq setInver(empty, TL) = empty .
 eq setInver(C, TL) = C .
 eq setInver(V, TL) = if in(V, TL) then 'invert[V] else V fi .
 eq setInver(F[TL], TL') = F[setInver(TL, TL')] .
 eq setInver((T, TL), TL') =  setInver(T, TL'), setInver(TL, TL') .

 eq setInver(T = T', TL) =  setInver(T, TL) = setInver(T', TL) .
 eq setInver(T := S, TL) =  setInver(T, TL) := S .
 eq setInver(T => T', TL) =  setInver(T, TL) => setInver(T', TL) .
 eq setInver(EqC /\ EqC', TL) =  setInver(EqC, TL) /\ setInver(EqC', TL) .
 eq setInver(QC /\ QC', TL) =  setInver(QC, TL) /\ setInver(QC', TL) .

 op getVarSet : TermList -> TermList .
 op getVarSet1 : TermList -> TermList .
 
 eq getVarSet(empty) =  empty .
 eq getVarSet((V, TL)) = getVarSet(TL) .
 eq getVarSet((C, TL)) = getVarSet(TL) .
 eq getVarSet((F[TL], TL1)) =  getVarSet(TL) , getVarSet(TL1) .
 eq getVarSet((inv(TL), TL1)) =  getVarSet1(TL) , getVarSet(TL1) .
 *** eq getVarSet((T, TL)) =  getVarSet(T), getVarSet(TL) .

 
 eq getVarSet1(empty) = empty .
 eq getVarSet1((V, TL)) = V, getVarSet1(TL) .
 eq getVarSet1((C, TL)) = getVarSet1(TL) .
 eq getVarSet1((F[TL], TL')) = getVarSet(TL), getVarSet1(TL') .

 op in : Variable TermList -> Bool .
 eq in(V, empty) = false .
 eq in(V, (V', TL)) = if (V == V') then true else in(V, (TL)) fi .

 eq rt-getOpName(op F : TpL -> Tp [AtS] . OPDS) = if (metadata("ring") in (AtS)) then
    F ; rt-getOpName(OPDS) else rt-getOpName(OPDS) fi .
 eq rt-getOpName(none) = none .
 eq crt-getOpName(op F : TpL -> Tp [AtS] . OPDS) = if (metadata("cring") in (AtS)) then
    F ; crt-getOpName(OPDS) else crt-getOpName(OPDS) fi .
 eq crt-getOpName(none) = none .
 eq art-getOpName(op F : TpL -> Tp [AtS] . OPDS) = if (metadata("aring") in (AtS)) then
    F ; art-getOpName(OPDS) else art-getOpName(OPDS) fi .
 eq art-getOpName(none) = none .

  ***(eq rt-getOpName(op F : TpL -> Tp [AtS] . OPDS) = if (ctor in (AtS)) then
    F ; rt-getOpName(OPDS) else rt-getOpName(OPDS) fi .
 eq rt-getOpName(none) = none .
 eq crt-getOpName(op F : TpL -> Tp [AtS] . OPDS) = if (ctor in (AtS)) then
    F ; crt-getOpName(OPDS) else crt-getOpName(OPDS) fi .
 eq crt-getOpName(none) = none .
 eq art-getOpName(op F : TpL -> Tp [AtS] . OPDS) = if (ctor in (AtS)) then
    F ; art-getOpName(OPDS) else art-getOpName(OPDS) fi .
 eq art-getOpName(none) = none .)

 eq eqQidList(Q ; QidS, QidS') = (Q in QidS') or eqQidList(QidS, QidS') .
 eq eqQidList(none, QidS') = false .

 eq rt-eq-add(eq T = T' [AtS] ., QidS, QidS', QidS'') = rt-eq-make(rt-eq-gen(T, QidS, QidS', QidS''), T', AtS) .
 *** eq rt-eq-add(eq T = T' [AtS] ., QidS, QidS', QidS'') = rt-eq-make(rt-eq-gen(slipt(T, QidS, QidS', QidS''), QidS, QidS', QidS''), T', AtS) .
 *** eq rt-eq-add(eq T = T' [AtS] ., QidS, QidS', QidS'') = rt-eq-make(rt-eq-gen(slipt(T, QidS, QidS', QidS''), QidS, QidS', QidS''), sliptr(T', getVarSetSlipt1(T)), AtS) .
 eq rt-eq-add(ceq T = T' if EqC [AtS]., QidS, QidS', QidS'') = rt-eq-make(rt-eq-gen(T, QidS, QidS', QidS''), T', EqC, AtS) .

 eq rt-rl-add(rl T => T' [AtS] ., QidS, QidS', QidS'') = rt-rl-make(rt-eq-gen(T, QidS, QidS', QidS''), T', AtS) .
 eq rt-rl-add(crl T => T' if Cd [AtS] ., QidS, QidS', QidS'') = rt-rl-make(rt-eq-gen(T, QidS, QidS', QidS''), T', Cd, AtS) .

 eq rt-eq-make(emp, T', AtS) = none .
 eq rt-eq-make((empty || TLS), T', AtS) = none .
 eq rt-eq-make((TL || TLS), T', AtS) =  rt-eq-make1(TL, T', AtS) rt-eq-make(TLS, T', AtS) .

 eq rt-eq-make(emp, T', EqC, AtS) = none .
 eq rt-eq-make((empty || TLS), T', EqC, AtS) = none .
 eq rt-eq-make((TL || TLS), T', EqC, AtS) =  rt-eq-make1(TL, T', EqC, AtS) rt-eq-make(TLS, T', EqC, AtS) .

 eq rt-eq-make1(nil, T', AtS) = none .
 eq rt-eq-make1((T, TL), T', AtS) = if checkIvn(T) then eq getInv(T) = setInver(T', getVarSet(T)) [AtS] . rt-eq-make(TL, T', AtS) else eq T = T' [AtS] . rt-eq-make(TL, T', AtS) fi .
 
 eq rt-eq-make1(nil, T', EqC, AtS) = none .
 eq rt-eq-make1((T, TL), T', EqC, AtS) = if checkIvn(T) then ceq getInv(T) = setInver(T', getVarSet(T)) if setInver(EqC, getVarSet(T)) [AtS] . rt-eq-make(TL, T', EqC, AtS) else ceq T = T' if EqC [AtS] . rt-eq-make(TL, T', EqC, AtS) fi .

 eq rt-rl-make(emp, T', AtS) = none .
 eq rt-rl-make((empty || TLS), T', AtS) = none .
 eq rt-rl-make((TL || TLS), T', AtS) =  rt-rl-make1(TL, T', AtS) rt-rl-make(TLS, T', AtS) .

 eq rt-rl-make(emp, T', Cd, AtS) = none .
 eq rt-rl-make((empty || TLS), T', Cd, AtS) = none .
 eq rt-rl-make((TL || TLS), T', Cd, AtS) =  rt-rl-make1(TL, T', Cd, AtS) rt-rl-make(TLS, T', Cd, AtS) .

 eq rt-rl-make1(nil, T', Cd, AtS) = none .
 eq rt-rl-make1((T, TL), T', Cd, AtS) =  if checkIvn(T) then  crl getInv(T) => setInver(T', getVarSet(T)) if setInver(Cd, getVarSet(T)) [AtS] . rt-rl-make(TL, T', Cd, AtS) else crl T => T'  if Cd [AtS] . rt-rl-make(TL, T', Cd, AtS) fi .

 eq rt-rl-make1(nil, T', AtS) = none .
 eq rt-rl-make1((T, TL), T', AtS) = if checkIvn(T) then rl getInv(T) => setInver(T', getVarSet(T)) [AtS] . rt-rl-make(TL, T', AtS) else  rl T => T' [AtS] . rt-rl-make(TL, T', AtS) fi .

 eq rt-eq-gen(V, QidS, QidS', QidS'') = V .
 eq rt-eq-gen(C, QidS, QidS', QidS'') = C .
 ceq rt-eq-gen(F'[F[TL]], QidS, QidS', QidS'') =  rt-term-round(F', F, mkSet(rt-termList(rt-getTermList(F, TL), QidS, QidS', QidS''))) if (F' in QidS) .
 ceq rt-eq-gen(F'[F[TL]], QidS, QidS', QidS'') =  rt-term-cround(F', F, mkSet(rt-termList(rt-getTermList(F, TL), QidS, QidS', QidS''))) if (F' in QidS') .
 ceq rt-eq-gen(F'[F[TL]], QidS, QidS', QidS'') =  rt-term-around(F', F, mkSet(rt-termList(rt-getTermList(F, TL), QidS, QidS', QidS''))) if (F' in QidS'') .
 eq rt-eq-gen(F[TL],  QidS, QidS', QidS'') =  rt-term(none, F, mkSet(rt-termList(TL, QidS, QidS', QidS''))) [owise] .

 eq rt-getTermList(F, (V, F[TL])) = V , rt-getTermList(F, TL) .
 eq rt-getTermList(F, (C, F[TL])) = C , rt-getTermList(F, TL) .
 eq rt-getTermList(F, (F'[TL], F[TL'])) = if (F == F') then rt-getTermList(F, TL) , rt-getTermList(F, TL')
    else F'[TL] , rt-getTermList(F, TL') fi .
 eq rt-getTermList(F, (F[TL], V)) = V , rt-getTermList(F, TL) .
 eq rt-getTermList(F, (F[TL], C)) = C , rt-getTermList(F, TL) .
 eq rt-getTermList(F, (F[TL], F'[TL'])) = if (F == F') then rt-getTermList(F, TL) , rt-getTermList(F, TL')
    else rt-getTermList(F, TL'), F'[TL'] fi .
 eq rt-getTermList(F, TL) = TL [owise] .

 eq mkSet((T, TL) || emp) = T || mkSet(TL || emp) .
 eq mkSet((T, TL) || TLS) = mkSet1(T, mkSet(TLS)) || mkSet(TL || TLS) [owise] .
 eq mkSet(empty || TLS) = emp  .

 eq mkSet1(T, (TL || TLS)) = (T, TL) || mkSet1(T, TLS) .
 eq mkSet1(T, emp) = emp .

 eq rt-term(none, F, TL || TLS) = F[TL] , rt-term(none, F, TLS) .
 eq rt-term(F', F, TL || TLS) = F'[F[TL]] , rt-term(F', F, TLS) .
 eq rt-term(F', F, emp) = empty .
 eq rt-term(none, F, emp) = empty .

 eq rt-term-round(F', F, TL || TLS) = rt-term(F', F, rt-round(TL, 1, numElem(TL))) || rt-term-round(F', F, TLS) .
 eq rt-term-round(F', F, emp) = emp .

 eq rt-term-cround(F', F, TL || TLS) = rt-term(F', F, rt-cround(TL, 1, numElem(TL))) || rt-term-cround(F', F, TLS) .
 eq rt-term-cround(F', F, emp) = emp .

 eq rt-term-around(F', F, TL || TLS) = rt-term(F', F, rt-around(TL, 1, numElem(TL))) || rt-term-around(F', F, TLS) .
 eq rt-term-around(F', F, emp) = emp .

 eq rt-termList(empty, QidS, QidS', QidS'') = emp .
 eq rt-termList((T, TL), QidS, QidS', QidS'') = if eqQidList(rt-getOpSet(T), QidS ; QidS' ; QidS'')
    then rt-eq-gen(T, QidS, QidS', QidS'') || rt-termList(TL, QidS, QidS', QidS'')
    else T || rt-termList(TL, QidS, QidS', QidS'') fi  .

 op rt-cround1 : TermList Nat Nat -> setTermList .
 op inv : TermList -> Term [ctor] .
 eq rt-cround((T, TL), N', N) = if N' < N then (T, TL) || rt-cround((TL , T), N' + 1, N) else  (T, TL) fi .
 eq rt-around(TL, N', N) = rt-cround1(invert(TL), N', N) .
 eq rt-round(TL, N', N) =  rt-cround(TL, N', N) || rt-around(TL, N', N).
 eq rt-cround1((T, TL), N', N) = if N' < N then inv((T, TL)) || rt-cround1((TL , T), N' + 1, N) else  inv((T, TL)) fi .

 eq invert(T) = T .
 eq invert((T, TL)) = invert(TL), T .

 eq numElem(empty) = 0 .
 eq numElem((T, TL)) = 1 + numElem(TL) .

 op rb : Module -> Module .
 op rb-inv : Module -> Module .
 op rb-fix : Module -> Module .
 op rb-lc : Module -> Module .
 op rb-check : Module -> Nat .
 op rb-check1 : ImportList -> Nat .

 ceq rb(M) = rb-inv(M) if rb-check(M) == 1 .
 ceq rb(M) = rb-fix(M) if rb-check(M) == 2 .
 ceq rb(M) = rb-lc(M) if rb-check(M) == 3 .
 ceq rb(M) = M if rb-check(M) == 0 .

 eq rb-check(mod H is IL sorts SS . SSDS OPDS MAS EqS RlS endm) =  rb-check1(IL) .
 eq rb-check(fmod H is IL sorts SS . SSDS OPDS MAS EqS endfm) =  rb-check1(IL) .
 eq rb-check1(nil) = 0 .
 eq rb-check1((I IL)) = if ((I == (protecting 'RING-INTERVAL .)) or (I == (including 'RING-INTERVAL .)) or (I == (extending 'RING-INTERVAL .)))  then 1 else  rb-check1(IL) fi .


 eq rb-inv(mod H is IL sorts SS . SSDS OPDS MAS EqS RlS endm) = mod H is IL sorts SS . SSDS OPDS MAS rb-inv-Initial(EqS) rb-inv-Rule(RlS) endm .
 eq rb-inv(fmod H is IL sorts SS . SSDS OPDS MAS EqS endfm) = fmod H is IL sorts SS . SSDS OPDS MAS rb-inv-Initial(EqS)  endfm .

 op rb-inv-Initial : EquationSet -> EquationSet .
 eq rb-inv-Initial(eq T = T' [AtS] . EqS) = if (getType(T) == 'Config) then (eq T = 'inv-Initial[T'] [AtS] .)  rb-inv-Initial(EqS) else (eq T = T' [AtS] .)  rb-inv-Initial(EqS) fi .
 eq rb-inv-Initial(EqS) = EqS [owise] .

 op rb-inv-Rule : RuleSet -> RuleSet .
 op rb-inv-Rule1 : Rule -> Rule .
 op rb-inv-RuleTermR : TermList -> TermList .
 op rb-inv-RuleTermR1 : TermList String TermList String String TermList -> TermList .
 op rb-inv-RuleGetQid : TermList -> TermList .
 op rb-inv-RuleTermL : TermList TermList -> TermList .
 op rb-inv-RuleTermL1 : TermList TermList String TermList String String -> TermList .
 op rb-inv-checkMove1 : TermList -> Bool .
 op rb-inv-checkMove2 : TermList -> Bool .
 op rb-getName : Term -> QidSet .

 eq rb-getName(V) = getName(V) .
 eq rb-getName(C) = getName(C) .
 eq rb-getName(F[TL]) = F .
 
 eq rb-inv-Rule ((R RlS)) = (rb-inv-Rule1(R) rb-inv-Rule(RlS)) .
 eq rb-inv-Rule1(rl T => T' [AtS] .) = (rl rb-inv-RuleTermL(T, rb-inv-RuleGetQid(T')) => rb-inv-RuleTermR(T') [AtS] .) .
 eq rb-inv-Rule1(crl T => T' if Cd [AtS] .) = (crl  rb-inv-RuleTermL(T, rb-inv-RuleGetQid(T')) => rb-inv-RuleTermR(T') if Cd [AtS] .) .
 eq rb-inv-Rule1(none) = none .

 eq rb-inv-RuleGetQid(empty) = empty .
 eq rb-inv-RuleGetQid(V) = empty .
 eq rb-inv-RuleGetQid(C) = empty .
 eq rb-inv-RuleGetQid('_->[T]) =  rb-getName(T) .
 eq rb-inv-RuleGetQid('_<-[T]) =  rb-getName(T) .
 eq rb-inv-RuleGetQid(F[TL]) =   rb-inv-RuleGetQid(TL) .
 eq rb-inv-RuleGetQid((T, TL)) =  rb-inv-RuleGetQid(T), rb-inv-RuleGetQid(TL)  [owise]  .

 eq rb-inv-RuleTermL('`{_`}['_`,_[TL]], QidS) =  '`{_`}['_`,_[rb-inv-RuleTermL1(TL, QidS, "0", 'L:Int, "0", "0")]] .
 eq rb-inv-RuleTermL1(empty, QidS, N1, N2, N3, N4) =  empty  .
 *** eq rb-inv-RuleTermL('`{_`}['_`,_[TL]], empty) =  '`{_`}['_`,_[TL]]  .
 *** eq rb-inv-RuleTermL('`{_`}['_`,_[TL]], empty) = '`{_`}['_`,_[rb-inv-RuleTermL1(TL, empty, "0", 'L:Int, "0", "0")]] .

 eq rb-inv-RuleTermL1((V, TL), QidS, N1, N2, N3, N4) = if (getName(V) in QidS) then '<_`,_`,_`,_`,_>[V,  qid("R" + N1 + ":Robot"), N2,'nil.Pending, qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermL1(TL, QidS, N1 + "0", '_+_[N2, V],  N3 + "0", N4 + "0") else '<_`,_`,_`,_`,_>[V,  qid("R" + N1 + ":Robot"), N2, qid("P" + N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermL1(TL, QidS, N1 + "0", '_+_[N2, V], N3 + "0", N4 + "0") fi .
 
 eq rb-inv-RuleTermL1((C, TL), QidS, N1, N2, N3, N4) = if (getName(C) in QidS) then '<_`,_`,_`,_`,_>[C,  qid("R" + N1 + ":Robot"), N2,'nil.Pending, qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermL1(TL, QidS, N1 + "0", '_+_[N2, C],  N3 + "0", N4 + "0") else '<_`,_`,_`,_`,_>[C,  qid("R" + N1 + ":Robot"), N2, qid("P" + N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermL1(TL, QidS, N1 + "0", '_+_[N2, C], N3 + "0", N4 + "0") fi .
 
 eq rb-inv-RuleTermL1(('_`,_[TL], TL1), QidS, N1, N2, N3, N4) =  '_`,_[ rb-inv-RuleTermL1((TL,TL1), QidS, N1, N2, N3, N4)] .

eq rb-inv-RuleTermL1((F[TL], TL1), QidS, N1, N2, N3, N4) =  if (F in QidS) then '<_`,_`,_`,_`,_>[F[TL], qid("R" + N1 + ":Robot"), N2,'nil.Pending, qid("PS" +  N4 + ":PendingSet")] ,  rb-inv-RuleTermL1(TL1, QidS, N1 + "0", '_+_[N2, F[TL]], N3 + "0", N4 + "0") else '<_`,_`,_`,_`,_>[F[TL], qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] ,  rb-inv-RuleTermL1(TL1, QidS, N1 + "0", '_+_[N2, F[TL]], N3 + "0", N4 + "0") fi .

 
  
  *** eq rb-inv-RuleTermL1((F[TL], TL1), QidS, N1, N2, N3, N4) =  if (F in QidS) then '<_`,_`,_`,_`,_>[F[TL], qid("R" + N1 + ":Robot"), N2,'nil.Pending, qid("PS" +  N4 + ":PendingSet")] ,  rb-inv-RuleTermL1(TL1, QidS, N1 + "0", '_+_[N2, F[TL]], N3 + "0", N4 + "0") else '<_`,_`,_`,_`,_>[F[TL], qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] ,  rb-inv-RuleTermL1(TL1, QidS, N1 + "0", '_+_[N2, F[TL]], N3 + "0", N4 + "0") fi .

 eq rb-inv-checkMove1(('_->[TL], TL1)) = true .
 *** eq rb-inv-checkMove1('_`,_[TL]) =  rb-inv-checkMove1(TL) .
 eq rb-inv-checkMove1((T, TL)) =  false [owise] .


 eq rb-inv-checkMove2(('_<-[TL], TL1)) = true .
 *** eq rb-inv-checkMove2('_`,_[TL]) =  rb-inv-checkMove2(TL) .
 eq rb-inv-checkMove2((T, TL)) =  false [owise] .

 op getOut : TermList -> TermList .
 eq getOut('_->[TL]) = TL .
 eq getOut('_<-[TL]) = TL .
 eq getOut(TL) =  TL [owise] .
 
 eq rb-inv-RuleTermR('`{_`}['_`,_[TL]]) =  '`{_`}['_`,_[rb-inv-RuleTermR1(TL, "0", 'L:Int, "0", "0", empty)]] .
 eq rb-inv-RuleTermR1(empty, N1, N2, N3, N4, N5) =  empty  .

 eq rb-inv-RuleTermR1((V, TL), N1, N2, N3, N4, N5) = if (rb-inv-checkMove1((TL, N5)) or rb-inv-checkMove2((TL, N5))) then '<_`,_`,_`,_`,_>[V,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"), qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, V],  N3 + "0", N4 + "0", (N5, V)) else '<_`,_`,_`,_`,_>[V,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, V], N3 + "0", N4 + "0", (N5, V)) fi .

 *** eq rb-inv-RuleTermR1((V, TL), N1, N2, N3, N4, N5) = if (rb-inv-checkMove1((TL, N5)) or rb-inv-checkMove2((TL, N5))) then '<_`,_`,_`,_`,_>[V,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"), 'add['|_`,_|['0.Nat, ('_`,_[getOut(TL), (N5, V)])], qid("PS" +  N4 + ":PendingSet")]] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, V],  N3 + "0", N4 + "0", (N5, V)) else '<_`,_`,_`,_`,_>[V,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, V], N3 + "0", N4 + "0", (N5, V)) fi .

 eq rb-inv-RuleTermR1((C, TL), N1, N2, N3, N4, N5) = if (rb-inv-checkMove1((TL, N5)) or rb-inv-checkMove2((TL, N5))) then '<_`,_`,_`,_`,_>[C,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"), qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, C],  N3 + "0", N4 + "0", (N5, C)) else '<_`,_`,_`,_`,_>[C,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, C], N3 + "0", N4 + "0", (N5, C)) fi .

 *** eq rb-inv-RuleTermR1((C, TL), N1, N2, N3, N4, N5) = if (rb-inv-checkMove1((TL, N5)) or rb-inv-checkMove2((TL, N5))) then '<_`,_`,_`,_`,_>[C,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"), 'add['|_`,_|['0.Nat, ('_`,_[getOut(TL), (N5, C)])], qid("PS" +  N4 + ":PendingSet")]] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, C],  N3 + "0", N4 + "0", (N5, C)) else '<_`,_`,_`,_`,_>[C,  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL, N1 + "0", '_+_[N2, C], N3 + "0", N4 + "0", (N5, C)) fi .

 eq rb-inv-RuleTermR1(('_->[TL], TL1), N1, N2, N3, N4, N5) =  '<_`,_`,_`,_`,_>[TL,  qid("R" + N1 + ":Robot"), N2, '|_`,_|['0.Nat, '_`,_[N5, TL, TL1]],  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL1, N1 + "0", '_+_[N2, TL],  N3 + "0", N4 + "0", (N5, TL)) .

 eq rb-inv-RuleTermR1(('_<-[TL], TL1), N1, N2, N3, N4, N5) =  '<_`,_`,_`,_`,_>[TL,  qid("R" + N1 + ":Robot"), N2, '|_`,_|['1.Nat, '_`,_[N5, TL, TL1]],  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL1, N1 + "0", '_+_[N2, TL],  N3 + "0", N4 + "0", (N5, TL)) .

 eq rb-inv-RuleTermR1(('_`,_[TL], TL1), N1, N2, N3, N4, N5) = '_`,_[rb-inv-RuleTermR1((TL,TL1),  N1, N2, N3, N4, N5)] .
 *** eq rb-inv-RuleTermR1((TL, '_`,_[TL1]), N1, N2, N3, N4, N5) = '_`,_[rb-inv-RuleTermR1((TL,TL1),  N1, N2, N3, N4, N5)] .

 eq rb-inv-RuleTermR1((F[TL], TL1), N1, N2, N3, N4, N5) = if (rb-inv-checkMove1((TL1, N5)) or rb-inv-checkMove2((TL1, N5))) then '<_`,_`,_`,_`,_>[F[TL],  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL1, N1 + "0", '_+_[N2, F[TL]],  N3 + "0", N4 + "0", (N5, F[TL])) else '<_`,_`,_`,_`,_>[F[TL],  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL1, N1 + "0", '_+_[N2, F[TL]], N3 + "0", N4 + "0", (N5, F[TL])) fi [owise] .

 *** eq rb-inv-RuleTermR1((F[TL], TL1), N1, N2, N3, N4, N5) = if (rb-inv-checkMove1((TL1, N5)) or rb-inv-checkMove2((TL1, N5))) then '<_`,_`,_`,_`,_>[F[TL],  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"), 'add['|_`,_|['0.Nat, ('_`,_[getOut(TL1), (N5, F[TL])])], qid("PS" +  N4 + ":PendingSet")]] , rb-inv-RuleTermR1(TL1, N1 + "0", '_+_[N2, F[TL]],  N3 + "0", N4 + "0", (N5, F[TL])) else '<_`,_`,_`,_`,_>[F[TL],  qid("R" + N1 + ":Robot"), N2, qid("P" +  N3 + ":Pending"),  qid("PS" +  N4 + ":PendingSet")] , rb-inv-RuleTermR1(TL1, N1 + "0", '_+_[N2, F[TL]], N3 + "0", N4 + "0", (N5, F[TL])) fi [owise] .
 
endfm


mod RING is
 pr RING-TRANSFORMATION .
 inc DATABASE-HANDLING .
 inc META-RSIGN .

 var  ME : ModuleExpression .
 var  RDC : RDatabaseClass .
 var  Atts : AttributeSet .
 vars DB DB' DB'' DB''' : Database .
 var  AtS : AttributeSet .
 vars F F' Q : Qid .
 vars T T' : Term .
 vars M M' : Module .
 var  O : Oid .
 var  N : Nat .

 sort RDatabaseClass .
 subsort RDatabaseClass < DatabaseClass .

 eq parseAttrs('ring.@Attr@) = metadata("ring") .
 eq parsePreAttrs('ring.@Attr@, N) = metadata("ring") .
 eq parseAttrs('cring.@Attr@) = metadata("cring") .
 eq parsePreAttrs('cring.@Attr@, N) = metadata("cring") .
 eq parseAttrs('aring.@Attr@) = metadata("aring") .
 eq parsePreAttrs('aring.@Attr@, N) = metadata("aring") .

 op RDatabase : -> RDatabaseClass [ctor] .
 *** Makes sure this rule is used
 op ring-header : Term -> Term .
 eq ring-header('fmod_is_endfm[T, T']) = 'rfmod_is_endfm[T, T'] .
 eq ring-header('mod_is_endm[T, T']) = 'rmod_is_endm[T, T'] .
 eq ring-header('omod_is_endom[T, T']) = 'romod_is_endom[T, T'] .
 eq ring-header(T) = T [owise] .

 op standard-header : Qid -> Qid .
 eq standard-header('rfmod_is_endfm) = 'fmod_is_endfm .
 eq standard-header('rmod_is_endm) = 'mod_is_endm .
 eq standard-header('romod_is_endom) = 'omod_is_endom .
 eq standard-header(F) = F [owise] .

  crl [module] :
       < O : RDC | db : DB, input : (F[T, T']), output : nil, default : ME, Atts >
    => < O : RDC | db : DB2, *** Do something after procModule to add matching info
                   input : nilTermList,
                   output : ('Introduced 'module header2Qid(Q) '\n),
                   default : parseHeader(T), Atts >
     if F' := standard-header(F) /\
        (F' == 'fmod_is_endfm) or-else
        ((F' == 'obj_is_endo)  or-else
        ((F' == 'obj_is_jbo)   or-else
        ((F' == 'mod_is_endm)  or-else
         (F' == 'omod_is_endom)))) /\
        Q := parseHeader(T) /\
        DB' := procModule(F'[T, T'], DB) /\
	       DB1 := if compiledModule(Q, DB')
               then DB'
               else database(evalModExp(Q, DB'))
               fi /\
        M' := rt(getFlatModule(Q, DB1)) /\
        M := rt(getTopModule(Q, DB1), getOps(M'), getSubsorts(M')) /\
        M'' := rt(getInternalModule(Q, DB1), getOps(M'), getSubsorts(M')) /\
        DB'' := insertTopModule(Q, M, DB1) /\
        DB''' := insertFlatModule(Q, M', DB'') /\
        DB2 := insertInternalModule(Q, M'', DB''') .



 ***(      	M' := rt(getFlatModule(Q, DB1)) /\
        M := rt(getTopModule(Q, DB1), getOps(M')) /\ )

var DB1 DB2 : Database .
var M'' : Module .


endm

mod RING-INIT is
 inc LOOP-MODE .
 pr RING .
 pr RING-BANNER .

 var  X@Database : DatabaseClass .
 vars QIL QIL' QIL'' : QidList .
 var  Atts : AttributeSet .
 vars RP RP' : ResultPair .
 var  DB : Database .
 var  T : Term .
 var  QI : Qid .
 var  N : Nat .
 var  O : Oid .

 op o : -> Oid [ctor] .

 --- State for LOOP mode:
 subsort Object < State .
 op rinit : -> System .

 op init-atts : -> AttributeSet .
 eq init-atts = db : initialDatabase, default : 'CONVERSION .

 rl [init] :
    rinit
 => [nil, < o : RDatabase | input : nilTermList, output : nil, init-atts >, ('\t string2qidList(ring-banner)'\n)] .

 crl [rin-ok] :
     [QIL, < O : X@Database | input : nilTermList, Atts >, QIL']
  => [nil,
      < O : X@Database | input : ring-header(T), Atts >,
      QIL']
  if QIL =/= nil /\
     metaParse(RGRAMMAR, QIL, '@Input@) : ResultPair /\
     T := getTerm(metaParse(RGRAMMAR, QIL, '@Input@)) .

 crl [r-in-syntax-error] :
     [QIL, < O : X@Database | output : nil, Atts >, QIL']
  => [nil,
      < O : X@Database | output : ('\r 'Warning: '\o
                printSyntaxError(metaParse(RGRAMMAR, QIL, '@Input@), QIL)
                '\n
                '\r 'Error: '\o 'No 'parse 'for 'input. '\n), Atts >,
      QIL']
  if QIL =/= nil /\
     noParse(N) := metaParse(RGRAMMAR, QIL, '@Input@)  .

 crl [rin-ambiguous] :
     [QIL, < O : X@Database | output : nil, Atts >, QIL']
  => [nil,
      < O : X@Database | output :  ('\r 'Error: '\o 'Ambiguous 'input. '\n), Atts >,
      QIL']
   if QIL =/= nil /\
      ambiguity(RP, RP') := metaParse(RGRAMMAR, QIL, '@Input@)  .

 rl [rout] :
    [QIL, < O : X@Database | output : (QI QIL'), Atts >, QIL'']
 => [QIL, < O : X@Database | output : nil, Atts >, (QIL'' QI QIL')] .
endm

set print attribute on .

set print conceal on .

***(
set trace on .

set trace eq off .

set trace condition off .

set trace substitution off .
)

loop rinit .


(fmod ROBOT is
     pr NAT .
     sort Robot .
     
     op r_ : Nat ->  Robot [ctor] .
endfm)

(fmod CONFIG is
     sort Seq .
     sort Config .
        
     op empS : -> Seq [ctor] .    
     op _`,_ : Seq Seq -> Seq [ctor assoc id: empS] .
     
     op `{_`} : Seq ->  Config [ctor ring] .
endfm)


(fmod PENDING is
     pr CONFIG .
     pr NAT .
     
     sort Pending .
     sort PendingSet .
     subsort Seq < Pending .
     subsort Pending < PendingSet .

     vars P P' : Pending .
     var PS : PendingSet .
     
     op nil : -> Pending [ctor] .
     op |_`,_| : Nat Seq  -> Pending [ctor] .
     
     op empPS : -> PendingSet [ctor] .    
     op _;_ : PendingSet PendingSet -> PendingSet [ctor assoc comm id: empPS] .

     op _in_ : Pending PendingSet -> Bool .  
     eq P in nil = false .
     eq P in (P' ; PS) = (P == P') or (P in PS) .

     op add : Pending PendingSet -> PendingSet .
     *** eq add(P, PS) = (P ; PS) . 

     op del : Pending PendingSet -> PendingSet .
     eq del(P, (P ; PS)) = PS .
     
endfm)

(fmod CONFIG-FRAME is
    pr CONFIG .
    pr ROBOT .
    pr PENDING .
    pr NAT .
    pr INT .
    
    sort TupleR .
    subsort TupleR < Seq .
    
    op <_`,_`,_`,_`,_> : Int Robot Nat Pending PendingSet -> TupleR [ctor] .
   
endfm)

(fmod RING-INTERVAL is
    pr CONFIG .
    pr NAT .
    pr INT .
    
    subsort Int < Seq .

    op _-> : Int -> Int .
    op _<- : Int -> Int .
   
endfm)



(fmod RING-FIX is
    pr CONFIG .
    
    subsort Nat < Seq .
   
endfm)

(fmod RING-LOC is
    pr CONFIG .
    pr ROBOT .
    
    sort Pair .
    subsort Pair < Seq .
    
    op <_`,_> :  Robot Nat -> Pair [ctor] .
    
endfm)


(fmod ROBOT-RING is
     pr RING-INTERVAL .
     pr RING-FIX .
     pr RING-LOC .
     
endfm)


(fmod ROBOT-RING-TRANS is
     pr ROBOT-RING .
     pr CONFIG-FRAME .
     pr NAT .
     pr INT .
    

     var S : Seq .
     vars I I1 : Int .
     vars N N1 N2 : Nat .

     op numNodes : Seq -> Nat .
     eq numNodes(empS) = 0 .
     eq numNodes(( I , S)) = if I >= 0 then 1 + I + numNodes(S) else numNodes(S) fi .

     op transfer : Config -> Config .
     op transferSeq : Seq Nat Nat Nat -> Seq .
     op transferMul : Int Int Nat Nat -> Seq .
     eq transfer({S}) = { transferSeq(S, 0, 0, numNodes(S)) } .
     eq transferSeq(empS, N1, N2, N) = empS .
     eq transferSeq((I, S), N1, N2, N) = if I >= 0 then (< I, r (N1),  (N2 rem N), nil, empPS > ,  transferSeq(S, N1 + 1, N2 + I + 1, N)) else transferMul(I, I, N1, (N2 rem N)), transferSeq(S, N1 + (- I), N2, N) fi .
     eq transferMul(I, I1, N1, N2) = if (I1 < 0) then (< I, r (N1), N2, nil, empPS > ,  transferMul(I, I1 + 1, N1 + 1, N2)) else empS fi .

     op inv-Initial : Config -> Config .
     op inv-Initial-Seq : Seq Nat Nat Nat -> Seq .
     op inv-Initial-Mul : Int Int Nat Nat -> Seq .
     eq inv-Initial({S}) = { inv-Initial-Seq(S, 0, 0, numNodes(S)) } .
     eq inv-Initial-Seq(empS, N1, N2, N) = empS .
     eq inv-Initial-Seq((I, S), N1, N2, N) = if I >= 0 then (< I, r (N1),  (N2 rem N), nil, empPS > ,  inv-Initial-Seq(S, N1 + 1, N2 + I + 1, N)) else inv-Initial-Mul(I, I, N1, (N2 rem N)), inv-Initial-Seq(S, N1 + (- I), N2, N) fi .
     eq inv-Initial-Mul(I, I1, N1, N2) = if (I1 < 0) then (< I, r (N1), N2, nil, empPS > ,  inv-Initial-Mul(I, I1 + 1, N1 + 1, N2)) else empS fi .    
endfm)

